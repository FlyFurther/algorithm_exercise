package com.hq.exercise_8_22;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by hq on 17/8/22.
 */
public class MaxSubarray {
    public static void main(String[] args) {
        int sum = betterMaxSubArray(new int[]{-32,-54,-36,62,20,76,-1,-86,-13,38,-58,-77,17,38,-17,43,32,-88,-19,-70,95,0,-64,75,15,
                -87,-26,69,-95,-65,-18,-28,-43,22,-88,54,-25,-13,67,61,-74,-91,60,42,24,-80,-15,-44,-91,42,-38,-96,-58,-3,55,33,
                -13,-71,2,-9,-60,60,39,-26,-41,50,-72,33,-62,94,-28,-37,79,-68,81,3,-71,-57,35,-63,61,96,-83,-97,-29,48,35,57,76,
                -86,-52,92,50,86,-34,85,14,-30,18,51,-36,66,90,-79,75,48,0,-96,67,-64,-83,28,-91,-90,30,-44,57,-58,-87,10,-68,-63,
                -21,81,-76,45,66,14,-85,-39,-58,-44,-95,-68,-47,79,56,52,59,23,64,75,-49,50,61,57,-94,-5,98,95,81,-70,-68,-40,87,
                -68,-95,30,45,96,90,86,-71,94,94,-19,50,27,-90,9,-50,51,-39,-23,-22,-78,-66,-17,-7,-68,-22,-26,-62,-13,34,-75,18,
                38,54,-36,11,22,-73,39,-7,98,96,-56,25,83,52,75,34,-86,-48,-88,-88,-14,-29,5,-6,26,78,9,-87,12,10,30,-72,-58,70,15
                ,63,97,-68,-67,95,-72,-24,20,-89,-94,-28,21,-81,1,32,-93,63,80,11,-43,6,-33,42,18,78,-47,-75,82,-6,95,-25,-66,69,6,
                -57,41,10,19,-62,21,1,10,-81,19,-89,28,2,73,8,-86,-93,-86,-20,49,8,-65,78,32,94,-51,27,-31,-41,-27,51,1,-86,-39,96,
                -48,58,-3,38,77,92,25,5,-5,-25,89,-15,-42,79,41,83,-13,52,61,-81,23,86,23,68,-55,72,19,23,86,80,19,-85,38,93,29,-8,
                85,-46,73,-43,5,62,41,62,41,-41,23,-72,-88,-39,-76,34,-52,23,-20,-31,-5,98,91,-19,78,-12,-28,-6,-19,-99,85,-34,-69,
                59,0,12,-2,-82,-25,-60,-23,74,-56,-35,-65,-33,75,-18,89,-45,51,-38,-46,19,42,-91,-93,91,-21,-13,91,-35,30,99,-99,-70,
                11,-2,-53,62,14,0,36,58,64,48,-98,40,-70,68,71,57,-70,-75,-23,48,-89,-17,39,-11,70,8,30,-23,-16,7,6,94,82,29,34,-4,-70,
                -53,-69,70,94,-67,-13,-98,77,-41,58,-93,-40,-88,31,-30,-5,-29,36,-58,55,-34,18,-84,73,-99,86,32,29,20,-72,35,67,-64,6,38,
                -55,92,39,-78,-72,-2,-95,-12,9,35,34,80,82,-30,-78,14,13,16,29,-37,16,16,94,-54,-87,98,57,56,-66,-37,-5,-22,-44,-66,-24,
                -17,8,-20,47,94,92,-18,51,74,28,50,-11,-59,-34,94,-20,59,10,-26,-95,23,-27,61,-21,-17,-98,50,38,-66,84,-86,-7,-31,-6,-59,
                -60,-14,22,91,-63,-73,41,2,-32,83,-3,47,42,83,98,23,6,-52,-38,62,30,-37,12,-32,-4,-27,-18,88,19,52,-94,58,-85,4,26,-72,31,
                -56,30,75,-72,-73,-1,69,-90,-3,-30,-7,44,31,-68,-48,70,20,19,-57,93,77,-92,12,29,-86,-53,20,17,73,48,-75,-83,-22,76,-79,-19,
                -24,67,-33,49,-63,36,-29,44,67,22,14,-12,-59,56,-42,-81,40,46,24,53,92,-55,-52,42,92,-51,36,-53,-74,56,4,1,0,70,-73,36,7,-3,
                -43,-49,95,70,38,-63,3,95,-68,-56,41,32,73,11,76,-79,-47,45,-53,65,68,-28,-1,-28,49,98,-80,75,12,26,-50,68,76,-55,16,-8,-42,
                -81,-36,-34,-61,-94,98,-87,-7,51,-90,22,-26,-44,-12,-58,4,63,-9,-47,61,10,-94,-50,-87,-68,95,65,-24,11,-43,11,6,-2,76,45,3,74,
                34,95,26,43,-6,76,76,81,94,-20,44,-15,10,-17,71,-8,9,83,23,4,26,75,-85,59,-37,-2,-43,-60,-57,36,90,53,8,-7,-27,-97,-31,-51,83,
                -36,6,5,25,92,64,-3,-39,-27,-43,60,77,82,12,68,19,75,-34,75,-85,-15,-11,-95,-62,96,-2,11,98,66,36,59,-93,-81,-59,32,87,-95,-71,
                -52,-23,-38,-92,-69,-78,20,99,40,-5,-58,-8,-14,27,80,-10,41,77,64,-71,52,8,42,11,14,60,28,-77,48,32,-72,72,86,-10,80,93,11,-23,
                69,-72,48,-88,19,-89,15,-23,-23,-67,-46,-58,-38,82,26,-96,-29,-83,40,98,-60,-12,31,-33,-62,-6,33,94,-13,-79,-29,-43,-52,95,-55,
                44,-94,36,-79,-18,68,-49,0,-70,-67,-74,-90,3,-80,50,-21,-41,-85,86,2,-48,-20,-64,-54,43,-44,-7,76,-19,-35,-79,-75,-53,33,-78,6,
                2,-28,-94,8,-19,-91,18,61,-72,-55,-60,-37,-41,-74,64,-12,-18,76,10,-75,-67,80,-98,-10,-55,98,14,-31,32,35,74,-89,83,56,18,-36,
                64,-87,-75,68,-43,-59,-69,-7,-57,95,57,24,71,-33,49,80,-53,27,-30,-31,2,60,14,-89,-28,-12,-79,-45,-56,39,-4,-91,28,-3,76,85,38,
                84,-45,80,79,-88,5,27,-22,-69,-15,2,34,31,47,-64,-8,-39,-53,40,48,-56,95,68,82,-32,76,-12,64,30,-27,-21,14,4,-40,-30,15,41,73,
                92,48,-42,-29,-18,66,-82,-6,-65,-22,17,74,-97,61,46,71,20,-86,24,-92,55,-69,-43,-66,21,60,-7,67,-25,-89,41,-55,58,75,15,-83,18,
                10,11,52,64,-72,27,67,65,-50,15,-14,-59,-61,-7,95,-53,50,-71,67,10,-1,35,85,-14,-47,-70,-78,-95,21,-62,23,-69,25,-25,95,30,78,
                62,-5,-94,-46,80,-54,-8,-26,-59,15,-99,-54,-17,10,21,94,-28,-92,-53,1,-71,-49,99,-34,50,-70,68,-74,-75,-2,80,63,92,85,-83,73,
                -69,-14,-76,-52,-99,-76,-29,-40,33,91,-46,-94,98,-23,-17,-96,5,-18,-53,-45,-11,-85,-43,13,12,-62,-46,-19,99,-53,-46,-92,9,-46,
                -45,10,-23,2,46,87,-6,77,69,-31,-46,-71,-27,35,-12,19,90,76,10,-76,-34,-78,-62,19,2,-62,43,33,-55,-48,86,-24,38,-59,55,-15,-72,-95,-18,15,-88,65,59,58,0,63,62,-68,-30,51,-15,4,-66,32,93,-65,-65,18,23,-90,5,7,94,-27,-66,-89,87,17,-85,-54,-90,-97,-89,68,60,-12,9,-1,-4,78,-49,80,-18,-39,-11,-47,-5,23,47,95,9,-47,2,-20,2,12,-10,-10,-70,-19,12,-84,-17,23,60,-56,87,-31,42,-17,-52,69,-60,6,-69,5,58,25,-95,6,20,-10,35,99,69,-63,11,-63,3,17,17,-84,32,77,15,-7,97,2,61,39,61,85,-14,77,-31,16,-18,-96,-82,-14,9,15,75,-79,-9,21,-42,-98,57,37,-4,-25,52,-72,-71,-33,-3,-74,45,-64,41,-17,97,-73,-40,-34,19,41,-30,37,-73,55,-71,78,53,19,0,-89,-3,-43,47,92,8,-23,97,36,43,-29,61,-34,6,3,48,4,6,85,46,-74,26,92,39,30,25,67,-15,-22,-14,84,-35,82,-81,88,75,26,-35,49,-60,85,-80,77,-49,3,-43,75,-93,63,60,29,65,-36,-1,4,70,-76,-29,-45,1,56});
        System.out.println(sum);
    }

    public static int maxSubarray(int[] nums) {
        if (nums.length < 1) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int max = nums[0];
        int sum = 0;
        int[] index = new int[]{0, 0};
        for (int i = 0, length = nums.length; i < length; i++) {
            for (int j = i; j < length; j++) {
                sum += nums[j];
                if (sum > max) {
                    index[0] = i;
                    index[1] = j;
                    max = sum;
                }
            }
            sum = 0;
        }
        int[] subArray = Arrays.copyOfRange(nums, index[0], index[1]+1);
        System.out.print("[");
        for (int i = 0, length = subArray.length; i < length; i++) {
            System.out.print(subArray[i] + ",");
        }
        System.out.print("]=");
        return max;
    }

    public static int betterMaxSubArray(int[] nums) {
        if (nums.length < 1) {
            throw new ArrayIndexOutOfBoundsException("这是一个空数组");
        }
        int max = Integer.MIN_VALUE, sum = 0;
        int [] index = new int[]{0, 0};
        for (int i = 0, length = nums.length; i < length; i++) {
            if (sum >= 0) {
                sum += nums[i];
            } else {
                index[0] = i;
                sum = nums[i];
            }
            if (sum > max) {
                index[1] = i;
                max = sum;
            }
        }
        int[] subArray = Arrays.copyOfRange(nums, index[0], index[1]+1);
        System.out.print("[");
        for (int i = 0, length = subArray.length; i < length; i++) {
            System.out.print(subArray[i] + ",");
        }
        System.out.print("]=");
        return max;
    }
}
